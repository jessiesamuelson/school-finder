https://www.codeproject.com/Articles/1068287/Part-Building-web-app-using-react-js-express-js-no

# SET UP AND BACKEND

- npm install -g gulp bower nodemon
  - Gulp is a task runner which we will use to make our like easier with some automation for mundane workflow tasks
  - Bower is a package manager for various front end libraries like bootstrap, jquery etc. this is just a nicer way of installing these libraries in your app as opposed to downloading them manually.
  - We will also use "nodemon" to automatically restart our server application whenever a code change happens.

npm init
bower init

Install modules:
npm install --save browserify reactify vinyl-source-stream gulp react react-dom express guid
  - reactify is there to transpile JSX to javascript.


Now create two more directories inside root directory, "app" and "server", inside "app" directory create "actions", "components","dist" and "stores" directories. Don't worry about the directory names too much, I will explain what each directory will contain once we reach there. Next add following two file ".bowerrc" and "gulpfile.js" in the root directory of your app, edit .bowerrc file and add following code inside:
  {
      "directory":"app/lib"
  }


Add bootsrap:
  bower install --save bootstrap-css

Create server.js in server and set it up to do the following:
- Create an express app which listens to http requests on port 7777.
- Configure express to serve static content like html, css, images etc. from school-finder/app/dist directory.

*********** run server: ************************
nodemon ./server/server.js

update gulpfile:
a) Task bundle, takes "main.jsx" file, which is currently empty, transpiles jsx code to plain javascript using "reactify" then stream sources it using "vinyl-source-stream" further creates "main.js" file on the fly in "dist" directory with transpiled js code in it.

b) Task copy, takes index.html, bootstrap.min.css and style.css files files and copies them to "dist" folder.

run `gulp` in one terminal and `nodemon ./server/server.js` in another

# REACT

add two empty files "SchoolInfo.jsx" and "SchoolsList.jsx" in "components" directory

a) We are able to use "require" constructs here in order to add references even though browsers do not support that construct, because we will not be adding these files references to our html files directly rather "browserify" library which we have configured as gulp task will resolve these dependencies and bundle all of them together in "main.js" file.

b) React applications are built using react components, you can think of components as self contained templates with functionality bundled within the template itself, although react purists will not agree with this definition, I am proposing it for the simplicity sake. We create a react component by using React.createClass method

c) The weird looking syntax within the render function is called JSX, "reactify" which we have configured in the bundle task, trasnpiles this JSX code to JS code which browsers understand. You can write JavaScript expression within curly brackets "{}" which JSX transpiler interpolates while emitting JavaScript code.

d) Once you have created a react component, you can render that component inside another react component using familiar tag syntax, for example we have rendered SchoolInfo component inside SchoolList component using <SchoolInfo /> tag.

e) When you need to pass some data to a component, you can do so by  passing objects as value to components attributes while rendering it. Whatever you pass in component's attributes will be accessible within component in the form of a property of this.props Object. For example, while rendering SchoolInfo component in SchoolList, you pass school object in "info" attribute, which you can access in SchoolInfo component by this.props.info.

# FLUX

Flux ensures only unidirectional data flow throughout your application life cycle. Flux has following agents which keep the flux flow ticking:

1. Actions: these are the payloads with some data and some context (type) in short objects, these are created by some helper functions as a result of an activity in the view(mostly). For example when user clicks on an add button, we will create an action which will contain information to be added and the context. All actions are sent to the dispatcher.

2. Dispatcher: dispatcher works like a global hub which triggers all the listeners registered to it whenever an action is sent to it.

3. Stores: stores register themselves with dispatchers, when dispatcher broadcasts an actions arrival, stores update themselves if that action is relevant to those stores, and emit a change event which causes UI to get updated.

4. Views: Views are the html rendered components.

# DISPATCHER
we are going to maintain all the registered listeners in the listeners object. Whoever is interested in registering itself to dispatcher can use register method, on the other side action helpers will call dispatch method of dispatcher to broadcast an action.

# ACTIONS
As you can see there are two actions in our Action helper, addSchool and deleteSchool . Both actions take information in the form of school object and then add a context to it in the form of type property which tells which action will be done on which item. Whenever an action method is called (that will be from a view), it will call dispatch method of dispatcher with the payload.

# SCHOOL

In our store implementation look at the dispatcher.register method call, this is where store registers itself with the dispatcher. When dispatcher broadcasts an action, store's registered callback is called where it checks the payload's type information and decides an appropriate action whether it's addSchool or deleteSchool in our case.

Also note that after taking appropriate action in response to dispatcher's call, store calls triggerListeners, this is the final piece of the puzzle which gives UI renderer an opportunity to update the UI by calling all the subscribers of store's onChange event.

# ADD SCHOOL COMPONENT
1) We have added a form onSubmit handler "addSchool". You can add as many functions as you like within createClass parameter object.

2) Like we pass external data to a react components via attributes and we access this data by this.props object similar to that we can access internal state of our component by this.state object. All react components have their own internal state, and before we can use it, we need to initialize it by getInitialState function. This is a special function and the object it returns becomes the initial state of our components.

3) Like I have mentioned earlier, react does not support two-way-binding so we need to change the state ourself whenever we feel it's relevant, for example in our case whenever user enters some values in the form controls we update the state using handleInputChange function which get's triggered from onChange event handler. Notice we have used e.preventDefault() in event handlers to avoid page refresh.

4) When user clicks on "Add School" button, in the submit event handler we start the FLUX flow as shown in the following diagram:

views -> actions -> dispatcher -> store

 5) From Event handler we call action helper, which create an action and calls dispatcher. Dispatcher broadcasts the action and since store is subscribed to that action it updates itself and renders the UI. That is precisely the FLUX flow.

Add action functionality into the components AddSchooljsx and SchoolInfo.jsx and SchoolsList.jsx
